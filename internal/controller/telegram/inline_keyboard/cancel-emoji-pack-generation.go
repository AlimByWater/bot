package inline_keyboard

import (
	"log/slog"
	"strconv"
	"strings"

	"github.com/mymmrac/telego"
	"github.com/mymmrac/telego/telegohandler"
)

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å progressManager, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å.
type ProgressManager interface {
	Cancel(cancelKey string)
}

type CancelEmojiPackGeneration struct {
	logger          *slog.Logger
	progressManager ProgressManager
}

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ö—ç–Ω–¥–ª–µ—Ä–∞.
func NewCancelEmojiPackGeneration(pm ProgressManager) *CancelEmojiPackGeneration {
	return &CancelEmojiPackGeneration{
		progressManager: pm,
	}
}

func (h *CancelEmojiPackGeneration) AddLogger(logger *slog.Logger) {
	h.logger = logger.With(slog.String("handler", "cancel_emoji_pack_generation"))
}

func (h *CancelEmojiPackGeneration) Handler() telegohandler.Handler {
	return func(bot *telego.Bot, update telego.Update) {
		if update.CallbackQuery == nil {
			return
		}
		data := update.CallbackQuery.Data

		cancelKey := strings.TrimPrefix(data, "cancel_")
		parts := strings.Split(cancelKey, "_")
		if len(parts) < 3 {
			h.logger.Error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback –¥–ª—è –æ—Ç–º–µ–Ω—ã", "data", data)
			_ = bot.AnswerCallbackQuery(&telego.AnswerCallbackQueryParams{
				CallbackQueryID: update.CallbackQuery.ID,
				Text:            "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
				ShowAlert:       true,
			})
			return
		}

		// chatID, err := strconv.ParseInt(parts[0], 10, 64)
		// if err != nil {
		// 	h.logger.Error("–ù–µ–≤–µ—Ä–Ω—ã–π chatID –≤ callback", "data", data, "error", err)
		// 	return
		// }
		// msgID, err := strconv.Atoi(parts[1])
		// if err != nil {
		// 	h.logger.Error("–ù–µ–≤–µ—Ä–Ω—ã–π msgID –≤ callback", "data", data, "error", err)
		// 	return
		// }
		initiatorID, err := strconv.ParseInt(parts[2], 10, 64)
		if err != nil {
			h.logger.Error("–ù–µ–≤–µ—Ä–Ω—ã–π initiatorID –≤ callback", "data", data, "error", err)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π callback ‚Äì —Ç–æ—Ç –∂–µ, –∫—Ç–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
		if update.CallbackQuery.From.ID != initiatorID {
			_ = bot.AnswerCallbackQuery(&telego.AnswerCallbackQueryParams{
				CallbackQueryID: update.CallbackQuery.ID,
				Text:            "üñï",
				ShowAlert:       true,
			})
			return
		}

		// –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–º–µ–Ω—É —á–µ—Ä–µ–∑ progressManager
		h.progressManager.Cancel(cancelKey)

		_ = bot.AnswerCallbackQuery(&telego.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
		})
	}
}

func (h *CancelEmojiPackGeneration) Predicate() telegohandler.Predicate {
	return telegohandler.CallbackDataPrefix("cancel_")
}
