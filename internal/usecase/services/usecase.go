package services

import (
	"context"
	"elysium/internal/entity"
	"fmt"
	"log/slog"
)

type cacheUC interface {
	SaveServiceCache(ctx context.Context, service entity.Service) error
	GetServiceCache(ctx context.Context, botID int64, serviceName string) (entity.Service, error)
	RemoveServiceCache(ctx context.Context, botID int64, serviceName string) error
}

type repository interface {
	ListServicesByBotID(ctx context.Context, botID int64) ([]entity.Service, error)
	GetAllServices(ctx context.Context) ([]entity.Service, error)
	InitServices(ctx context.Context, services []entity.Service) error
}

type Module struct {
	logger *slog.Logger
	ctx    context.Context

	cache cacheUC
	repo  repository
}

func New(cache cacheUC, repo repository) *Module {
	return &Module{
		cache: cache,
		repo:  repo,
	}
}

func (m *Module) initServices(ctx context.Context) ([]entity.Service, error) {
	services := []entity.Service{
		{
			BotID:       -1007894673045,
			Name:        "emoji-generator",
			Description: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º —ç–º–æ–¥–∂–∏-–ø–∞–∫–æ–≤ –∏–∑ –ª—é–±–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
			Price:       1500, //15 —Ä—É–±–ª–µ–π –∑–∞ –æ–¥–∏–Ω –ø–∞–∫
			IsActive:    true,
		},
	}

	err := m.repo.InitServices(ctx, services)
	if err != nil {
		return nil, fmt.Errorf("failed to init services: %w", err)
	}

	return services, nil
}

func (m *Module) Init(ctx context.Context, logger *slog.Logger) error {
	m.ctx = ctx
	m.logger = logger.With(slog.String("module", "üì± services"))

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –ë–î –≤ –∫—ç—à –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	//services, err := m.repo.GetAllServices(ctx)
	//if err != nil {
	//	return fmt.Errorf("failed to get all services: %w", err)
	//}

	// TODO –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—é—Å—å —Å –Ω–∞–±–æ—Ä–æ–º —Å–µ—Ä–≤–∏—Å–æ–≤ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å
	services, err := m.initServices(ctx)
	if err != nil {
		return fmt.Errorf("failed to init services: %w", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å –≤ –∫—ç—à
	for _, service := range services {
		err = m.cache.SaveServiceCache(ctx, service)
		if err != nil {
			m.logger.Error("failed to save service to cache",
				slog.Int64("bot_id", service.BotID),
				slog.String("service_name", service.Name),
				slog.String("error", err.Error()),
			)
		}
	}

	m.logger.Info("services cache initialized",
		slog.Int("total_services", len(services)),
	)

	return nil
}

// GetService –ø–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
func (m *Module) GetService(ctx context.Context, botID int64, serviceName string) (entity.Service, error) {
	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
	service, err := m.cache.GetServiceCache(ctx, botID, serviceName)
	if err == nil {
		return service, nil
	}

	// –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –ë–î
	services, err := m.repo.ListServicesByBotID(ctx, botID)
	if err != nil {
		return entity.Service{}, err
	}

	// –ò—â–µ–º –Ω—É–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤ –∫—ç—à
	for _, service := range services {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å –≤ –∫—ç—à
		err = m.cache.SaveServiceCache(ctx, service)
		if err != nil {
			m.logger.Error("failed to save service to cache",
				slog.Int64("bot_id", botID),
				slog.String("service_name", service.Name),
				slog.String("error", err.Error()),
			)
		}

		// –ï—Å–ª–∏ —ç—Ç–æ –∏—Å–∫–æ–º—ã–π —Å–µ—Ä–≤–∏—Å, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
		if service.Name == serviceName {
			return service, nil
		}
	}

	return entity.Service{}, entity.ErrServiceNotFound
}

// GetServices –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –±–æ—Ç–∞
func (m *Module) GetServices(ctx context.Context, botID int64) ([]entity.Service, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –ë–î
	services, err := m.repo.ListServicesByBotID(ctx, botID)
	if err != nil {
		return nil, err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å –≤ –∫—ç—à
	for _, service := range services {
		err = m.cache.SaveServiceCache(ctx, service)
		if err != nil {
			m.logger.Error("failed to save service to cache",
				slog.Int64("bot_id", botID),
				slog.String("service_name", service.Name),
				slog.String("error", err.Error()),
			)
		}
	}

	return services, nil
}
