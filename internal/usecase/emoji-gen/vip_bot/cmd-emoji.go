package vip_bot

import (
	"context"
	"elysium/internal/entity"
	"errors"
	"fmt"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"log/slog"
	"strconv"
	"strings"
)

func (d *DBot) HandleEmojiCommandForDM(ctx context.Context, update *models.Update) {
	user, err := d.userUC.UserByTelegramID(ctx, update.Message.From.ID)
	if err != nil {
		d.logger.Error("Failed to get permissions", slog.String("err", err.Error()))
		d.sendMessageByBot(ctx, update.Message.Chat.ID, update.Message.ID, "–í–æ–∑–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", nil)
		return
	}

	{
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–∫
		can, err := d.userUC.CanGenerateEmojiPack(ctx, user)
		if err != nil {
			d.logger.Error("Failed to get permissions", slog.String("err", err.Error()))
			d.sendMessageByBot(ctx, update.Message.Chat.ID, update.Message.ID, "–í–æ–∑–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", nil)
			return
		}

		if !can {
			// TODO —Ç—É—Ç –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–∫. –¢—É—Ç –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ç.–¥.
		}
	}

	// Extract command arguments
	initialCommand := d.processor.ExtractCommandArgs(update.Message.Text, update.Message.Caption)
	emojiArgs, err := d.processor.ParseArgs(initialCommand)
	if err != nil {
		d.logger.Error("Invalid arguments", slog.String("err", err.Error()))
		d.sendMessageByBot(ctx, update.Message.Chat.ID, update.Message.ID, err.Error(), nil)
		return
	}

	// Setup command defaults and working environment
	d.processor.SetupEmojiCommand(emojiArgs, user)

	// Create working directory and download file
	if err := d.prepareWorkingEnvironment(ctx, update, emojiArgs); err != nil {
		d.logger.Debug("Failed to download file", slog.String("err", err.Error()))
		var message string
		switch err {
		case entity.ErrFileNotProvided:
			return
		case entity.ErrFileOfInvalidType:
			message = "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: GIF, JPEG, PNG, WebP, MP4, WebM, MPEG"
		case entity.ErrGetFileFromTelegram:
			message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Telegram"
		case entity.ErrFileDownloadFailed:
			message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞"
		default:
			message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞"
		}
		d.sendMessageByBot(ctx, update.Message.Chat.ID, update.Message.ID, message, nil)
		return
	}

	var emojiPack entity.EmojiPack
	if strings.Contains(emojiArgs.PackLink, d.tgbotApi.Self.UserName) {
		emojiPack, err = d.handleExistingPack(ctx, emojiArgs)
	} else {
		emojiPack, err = d.handleNewPack(ctx, user, d.b.ID, emojiArgs)
	}
	if err != nil {
		d.logger.Error("Failed to setup pack details", slog.String("err", err.Error()))
		d.sendMessageByBot(ctx, update.Message.Chat.ID, update.Message.ID, "–ø–∞–∫ —Å –ø–æ–¥–æ–±–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω", nil)
		return
	}

	// Create working directory and download file
	if err := d.prepareWorkingEnvironment(ctx, update, emojiArgs); err != nil {
		d.logger.Debug("Failed to download file", slog.String("err", err.Error()))
		var message string
		switch err {
		case entity.ErrFileNotProvided:
			return
		case entity.ErrFileOfInvalidType:
			message = "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: GIF, JPEG, PNG, WebP, MP4, WebM, MPEG"
		case entity.ErrGetFileFromTelegram:
			message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Telegram"
		case entity.ErrFileDownloadFailed:
			message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞"
		default:
			message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞"
		}
		d.sendMessageByBot(ctx, update.Message.Chat.ID, update.Message.ID, message, nil)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ–Ω–æ–π
	var cancel context.CancelFunc
	ctx, cancel = context.WithCancel(ctx)
	defer cancel()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
	progress, err := d.sendProgressMessage(ctx, update.Message.Chat.ID, update.Message.ID, update.Message.From.ID, "‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏-–ø–∞–∫–∞...")
	if err != nil {
		d.logger.Error("Failed to send initial progress message",
			slog.String("err", err.Error()),
			slog.Int64("telegram_user_id", emojiArgs.TelegramUserID))
	}
	defer d.deleteProgressMessage(ctx, update.Message.Chat.ID, progress.MessageID)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã
	cancelCh := d.progressManager.GetCancelChannel(progress.CancelKey)
	go func() {
		select {
		case <-cancelCh:
			cancel() // –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
			// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
			d.stickerQueue.Release(emojiArgs.PackLink)
			// –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –ø–∞–∫, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω
			if emojiArgs.PackLink != "" && emojiArgs.NewSet {
				_, _ = d.b.BotApi.DeleteStickerSet(ctx, &bot.DeleteStickerSetParams{
					Name: emojiArgs.PackLink,
				})
			}
		case <-ctx.Done():
			return
		}
	}()

	var stickerSet *models.StickerSet
	var emojiMetaRows [][]entity.EmojiMeta

	for {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
		d.updateProgressMessage(ctx, update.Message.Chat.ID, progress.MessageID, "üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ...")

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
		createdFiles, err := d.processor.ProcessVideo(ctx, emojiArgs)
		if err != nil {
			if errors.Is(err, context.Canceled) {
				return
			}
			slog.LogAttrs(ctx, slog.LevelError, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ", emojiArgs.ToSlogAttributes(slog.String("err", err.Error()))...)
			d.sendMessageByBot(ctx, update.Message.Chat.ID, update.Message.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: %s", err.Error()), nil)
			return
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤
		d.updateProgressMessage(ctx, update.Message.Chat.ID, progress.MessageID, "‚ú® –°–æ–∑–¥–∞–µ–º —ç–º–æ–¥–∑–∏...")

		// –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤
		stickerSet, emojiMetaRows, err = d.uploader.AddEmojis(ctx, d.b.BotApi, emojiArgs, createdFiles)
		if err != nil {
			if errors.Is(err, context.Canceled) {
				return
			}

			if strings.Contains(err.Error(), "PEER_ID_INVALID") || strings.Contains(err.Error(), "user not found") || strings.Contains(err.Error(), "bot was blocked by the user") {
				d.SendInitMessage(update.Message.Chat.ID, update.Message.ID)
				return
			}

			if strings.Contains(err.Error(), "STICKER_VIDEO_BIG") {
				_ = d.updateProgressMessage(ctx, update.Message.Chat.ID, progress.MessageID, "üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ...")
				emojiArgs.QualityValue++
				continue
			}

			// –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–≤—ã—Å–∏–ª –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ª–∏–º–∏—Ç –ø–∞–∫–æ–≤ –∏ –µ–º—É –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∫–∞–∫–æ–µ —Ç–æ –≤—Ä–µ–º—è
			if errors.Is(err, entity.ErrEmojiPacksLimitExceeded) {
				//d.sendErrorMessage(ctx, update.Message.Chat.ID, update.Message.ID, update.Message.MessageThreadID, err.Error())
				d.sendMessageByBot(ctx, update.Message.Chat.ID, update.Message.ID, err.Error(), nil)
				return
			}

			// ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ...
			d.sendMessageByBot(ctx, update.Message.Chat.ID, update.Message.ID, fmt.Sprintf("%s", err.Error()), nil)
			return
		}

		break
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if err := d.repo.UpdateEmojiCount(ctx, emojiPack.ID, len(stickerSet.Stickers)); err != nil {
		if errors.Is(err, context.Canceled) {
			return
		}
		d.logger.Error("Failed to update emoji count",
			slog.String("err", err.Error()),
			slog.String("pack_link", emojiArgs.PackLink),
			slog.Int64("user_id", emojiArgs.TelegramUserID))
	}

	if d.vip {
		selectedEmojis := d.processor.GenerateEmojiMessage(emojiMetaRows, stickerSet, emojiArgs)
		_, err := d.userBot.SendMessageWithEmojisToBot(ctx, strconv.FormatInt(d.tgbotApi.Self.ID, 10), emojiArgs.Width, emojiArgs.PackLink, selectedEmojis)
		if err != nil {
			if errors.Is(err, context.Canceled) {
				return
			}
			d.logger.Error("Failed to send message with emojis",
				slog.String("err", err.Error()),
				slog.String("pack_link", emojiArgs.PackLink),
				slog.Int64("user_id", emojiArgs.TelegramUserID))
		} else {
			sent := d.waitForEmojiMessageAndForwardIt(ctx, update.Message.From.ID, emojiArgs.PackLink)
			if sent {
				return
			}
		}
	}

	d.sendMessageByBot(ctx, update.Message.Chat.ID, update.Message.ID, fmt.Sprintf("–í–∞—à –ø–∞–∫\n%s", "https://t.me/addemoji/"+emojiArgs.PackLink), nil)

}
func (d *DBot) onEmojiSelect(ctx context.Context, b *bot.Bot, mes models.MaybeInaccessibleMessage, data []byte) {
	d.sendInfoMessage(ctx, mes.Message.Chat.ID, 0)
}
